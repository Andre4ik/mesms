const axios = require('axios');
const { Telegraf, Markup } = require('telegraf');
const { exec } = require('child_process');
const fs = require('fs');
// –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const token = '6517345143:AAG1Y-9HFLDc52AmjrsPPkE7ruzECW6dSIM';
const bot = new Telegraf(token);

// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω–∏—Ö –º—ñ—Å—Ç
const previousCities = {};

// –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –º–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
const userLanguages = {};

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
bot.start((ctx) => {
  const username = ctx.from.username;
  const userId = ctx.from.id;
  userLanguages[userId] = 'uk'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  ctx.reply(`–ü—Ä–∏–≤—ñ—Ç, ${username}! –Ø –±–æ—Ç –ø–æ–≥–æ–¥–∏. –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.`, {
    reply_markup: Markup.inlineKeyboard([
      [Markup.button.callback('üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'uk')],
      [Markup.button.callback('üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞', 'en')],
    ])
  });
});

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /previous_cities
bot.command('previous_cities', (ctx) => {
  const userId = ctx.from.id;
  const previousCitiesForUser = previousCities[userId] || [];

  if (previousCitiesForUser.length > 0) {
    let message = `<b>–í–∞—à—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –º—ñ—Å—Ç–∞:</b>`;
    for (let i = 0; i < Math.min(previousCitiesForUser.length, 5); i++) {
      message += `\n- ${previousCitiesForUser[i]}`;
    }
    ctx.replyWithHTML(message);
  } else {
    const language = userLanguages[ctx.from.id] || 'uk';
    const text = language === 'uk' ? '–í–∏ —â–µ –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –º—ñ—Å—Ç–∞.' : 'You have not entered any cities yet.';
    ctx.reply(text);
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const language = userLanguages[userId] || 'uk';
  const city = ctx.message.text;
  const apiKey = '17d6a1fddd58be958053677f785d2c2b';
  const apiUrl = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;

  try {
    const response = await axios.get(apiUrl);
    const weatherData = response.data;
    const forecasts = weatherData.list;

    // –ó–±–µ—Ä–µ–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –≤ –º–∞—Å–∏–≤—ñ previousCities
    if (!previousCities[ctx.message.from.id]) {
      previousCities[ctx.message.from.id] = [];
    }
    previousCities[ctx.message.from.id].unshift(city);
    if (previousCities[ctx.message.from.id].length > 5) {
      previousCities[ctx.message.from.id].pop();
    }

    const today = new Date();
    const dailyForecasts = forecasts.filter(forecast => {
      const date = new Date(forecast.dt_txt);
      return date.getDate() === today.getDate();
    });

    let message = `<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ ${city} –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ üì∞</b>`;

    dailyForecasts.forEach(forecast => {
      const temperature = Math.round(forecast.main.temp - 273.15);
      const description = translateWeatherDescription(forecast.weather[0].description, language);
      const time = new Date(forecast.dt_txt).toLocaleTimeString('ua-UA', { hour: '2-digit', minute: '2-digit' });

      message += `\n- ${time} - ${description}, \n –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C üå°Ô∏è`;
    });

    // –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —ñ–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥–∏ —É –≤–∏–≥–ª—è–¥—ñ GIF
    const gifUrl = 'https://i.gifer.com/68J.gif'; // –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è GIF
    await ctx.replyWithAnimation(gifUrl);

    ctx.replyWithHTML(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: getLocalizedText('–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å', language), callback_data: 'next_day_forecast' }],
          [{ text: getLocalizedText('–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –º—ñ—Å—Ç–∞', language), callback_data: 'show_previous_cities' }]
        ]
      }
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É:', error);
    ctx.reply(getLocalizedText('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞.', language));
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ –æ–ø–∏—Å—É –ø–æ–≥–æ–¥–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∞–±–æ –±—É–¥—å-—è–∫—É —ñ–Ω—à—É –º–æ–≤—É
function translateWeatherDescription(description, language) {
  switch (description) {
    case 'clear sky':
      return language === 'uk' ? 'üåû –Ø—Å–Ω–µ –Ω–µ–±–æ' : 'üåû Clear sky';
    case 'few clouds':
      return language === 'uk' ? 'üå§Ô∏è –ù–µ–≤–µ–ª–∏–∫–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å' : 'üå§Ô∏è Few clouds';
    case 'scattered clouds':
      return language === 'uk' ? '‚õÖ –•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏' : '‚õÖ Scattered clouds';
    case 'broken clouds':
      return language === 'uk' ? '‚òÅÔ∏è –•–º–∞—Ä–Ω–æ' : '‚òÅÔ∏è Broken clouds';
    case 'shower rain':
      return language === 'uk' ? 'üåßÔ∏è –ó–ª–∏–≤–∞' : 'üåßÔ∏è Shower rain';
    case 'rain':
      return language === 'uk' ? 'üåßÔ∏è –î–æ—â' : 'üåßÔ∏è Rain';
    case 'thunderstorm':
      return language === 'uk' ? '‚õàÔ∏è –ì—Ä–æ–∑–∞' : '‚õàÔ∏è Thunderstorm';
    case 'snow':
      return language === 'uk' ? '‚ùÑÔ∏è –°–Ω—ñ–≥' : '‚ùÑÔ∏è Snow';
    case 'mist':
      return language === 'uk' ? 'üå´Ô∏è –¢—É–º–∞–Ω' : 'üå´Ô∏è Mist';
    case 'light rain':
      return language === 'uk' ? 'üå¶Ô∏è –õ–µ–≥–∫–∏–π –¥–æ—â' : 'üå¶Ô∏è Light rain';
    case 'overcast clouds':
      return language === 'uk' ? '‚òÅÔ∏è –ü–æ—Ö–º—É—Ä—ñ —Ö–º–∞—Ä–∏' : '‚òÅÔ∏è Overcast clouds';
    default:
      return description;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
function getLocalizedText(text, language) {
  if (language === 'uk') {
    return text;
  } else if (language === 'en') {
    // –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –º–æ–≤–∏ —Ç—É—Ç
    // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    return text;
  } else {
    return text;
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
bot.catch((err) => {
  console.error('–ü–æ–º–∏–ª–∫–∞:', err);
});

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É"
bot.action(/(uk|en)/, (ctx) => {
  const language = ctx.match[0];
  userLanguages[ctx.from.id] = language;
  const text = language === 'uk' ? '–ú–æ–≤—É –±–æ—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.' : 'Bot language set to English.';
  ctx.reply(text);
});
// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å"
bot.action('next_day_forecast', async (ctx) => {
  ctx.reply(getLocalizedText('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–ª—è —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å.', userLanguages[ctx.from.id]));
});

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –º—ñ—Å—Ç–∞"
bot.action('show_previous_cities', async (ctx) => {
  const userId = ctx.from.id;
  const previousCitiesForUser = previousCities[userId] || [];
  const language = userLanguages[userId] || 'uk';

  if (previousCitiesForUser.length > 0) {
    let message = `<b>–í–∞—à—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –º—ñ—Å—Ç–∞:</b>`;
    for (let i = 0; i < Math.min(previousCitiesForUser.length, 5); i++) {
      message += `\n- ${previousCitiesForUser[i]}`;
    }
    ctx.replyWithHTML(message);
  } else {
    const text = language === 'uk' ? '–í–∏ —â–µ –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –º—ñ—Å—Ç–∞.' : 'You have not entered any cities yet.';
    ctx.reply(text);
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
bot.action(/.*/, async (ctx) => {
  const city = ctx.match[0];
  const language = userLanguages[ctx.from.id] || 'uk';
  const apiKey = '17d6a1fddd58be958053677f785d2c2b';
  const apiUrl = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;

  try {
    const response = await axios.get(apiUrl);
    const weatherData = response.data;
    const forecasts = weatherData.list;

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowForecasts = forecasts.filter(forecast => {
      const date = new Date(forecast.dt_txt);
      return date.getDate() === tomorrow.getDate();
    });

    let message = `<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ ${city} –Ω–∞ ${tomorrow.toLocaleDateString('ua-UA', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}üì∞:</b>`;

    tomorrowForecasts.forEach(forecast => {
      const temperature = Math.round(forecast.main.temp - 273.15);
      const description = translateWeatherDescription(forecast.weather[0].description, language);
      const time = new Date(forecast.dt_txt).toLocaleTimeString('ua-UA', { hour: '2-digit', minute: '2-digit' });

      message += `\n- ${time} - ${description}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C`;
    });

    ctx.replyWithHTML(message);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É:', error);
    ctx.reply(getLocalizedText('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞.', language));
  }
});
bot.catch((err) => {
  console.error('–ü–æ–º–∏–ª–∫–∞:', err);
});
// –©–æ–± –±–æ—Ç –ø—Ä–∞—Ü—é–≤–∞–≤ –ø–æ—Å—Ç—ñ–π–Ω–æ
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));